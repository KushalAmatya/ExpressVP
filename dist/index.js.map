{"version":3,"sources":["../src/index.ts","../src/routes/auth.routes.ts","../src/controllers/authController.ts","../src/middleware/validationMiddleware.ts","../src/schemas/authSchema.ts"],"sourcesContent":["import express, { Express } from \"express\";\r\nimport dotenv from \"dotenv\";\r\nimport authRouter from \"./routes/auth.routes\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\ndotenv.config();\r\n\r\nconst app: Express = express();\r\nconst PORT = process.env.PORT || 5000;\r\napp.use(cors());\r\napp.use(helmet());\r\napp.use(express.json());\r\napp.use(\"/auth\", authRouter);\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on http://localhost:${PORT}`);\r\n});\r\n","import express from \"express\";\r\nimport { login, register } from \"../controllers/authController\";\r\nimport { validateData } from \"../middleware/validationMiddleware\";\r\nimport { authRegistrationSchema, authLoginSchema } from \"../schemas/authSchema\";\r\nconst authRouter = express.Router();\r\n\r\nauthRouter.post(\"/login\", validateData(authLoginSchema), login);\r\n\r\nauthRouter.post(\"/register\", validateData(authRegistrationSchema), register);\r\n\r\nexport default authRouter;\r\n","import { Request, Response } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nconst login = (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n  const authToken = jwt.sign(\r\n    { email: email, password: password },\r\n    process.env.SECRET as string,\r\n    { expiresIn: \"1h\" }\r\n  );\r\n  console.log(authToken);\r\n  res.json({ email, password, authToken });\r\n};\r\n\r\nconst register = (req: Request, res: Response) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  res.json({ name, email, password });\r\n};\r\n\r\nexport { login, register };\r\n","import { Request, Response, NextFunction } from \"express\";\r\nimport { z, ZodError } from \"zod\";\r\n\r\nimport { StatusCodes } from \"http-status-codes\";\r\n\r\nexport function validateData(schema: z.ZodObject<any, any>) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      schema.parse(req.body);\r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof ZodError) {\r\n        const errorMessages = error.errors.map((issue: any) => ({\r\n          message: `${issue.path.join(\".\")} is ${issue.message}`,\r\n        }));\r\n        res\r\n          .status(StatusCodes.BAD_REQUEST)\r\n          .json({ error: \"Invalid data\", details: errorMessages });\r\n      } else {\r\n        res\r\n          .status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ error: \"Internal Server Error\" });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const authRegistrationSchema = z.object({\r\n  name: z.string().min(2).max(255),\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n\r\nexport const authLoginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,kBAAiC;AACjC,oBAAmB;;;ACDnB,qBAAoB;;;ACCpB,0BAAgB;AAChB,IAAM,QAAQ,CAAC,KAAc,QAAkB;AAC7C,QAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAChC,QAAM,YAAY,oBAAAC,QAAI;AAAA,IACpB,EAAE,OAAc,SAAmB;AAAA,IACnC,QAAQ,IAAI;AAAA,IACZ,EAAE,WAAW,KAAK;AAAA,EACpB;AACA,UAAQ,IAAI,SAAS;AACrB,MAAI,KAAK,EAAE,OAAO,UAAU,UAAU,CAAC;AACzC;AAEA,IAAM,WAAW,CAAC,KAAc,QAAkB;AAChD,QAAM,EAAE,MAAM,OAAO,SAAS,IAAI,IAAI;AAEtC,MAAI,KAAK,EAAE,MAAM,OAAO,SAAS,CAAC;AACpC;;;AChBA,iBAA4B;AAE5B,+BAA4B;AAErB,SAAS,aAAa,QAA+B;AAC1D,SAAO,CAAC,KAAc,KAAe,SAAuB;AAC1D,QAAI;AACF,aAAO,MAAM,IAAI,IAAI;AACrB,WAAK;AAAA,IACP,SAAS,OAAO;AACd,UAAI,iBAAiB,qBAAU;AAC7B,cAAM,gBAAgB,MAAM,OAAO,IAAI,CAAC,WAAgB;AAAA,UACtD,SAAS,GAAG,MAAM,KAAK,KAAK,GAAG,CAAC,OAAO,MAAM,OAAO;AAAA,QACtD,EAAE;AACF,YACG,OAAO,qCAAY,WAAW,EAC9B,KAAK,EAAE,OAAO,gBAAgB,SAAS,cAAc,CAAC;AAAA,MAC3D,OAAO;AACL,YACG,OAAO,qCAAY,qBAAqB,EACxC,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AACF;;;ACzBA,IAAAC,cAAkB;AAEX,IAAM,yBAAyB,cAAE,OAAO;AAAA,EAC7C,MAAM,cAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG;AAAA,EAC/B,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,cACP,OAAO,EACP,MAAM,uDAAuD;AAClE,CAAC;AAEM,IAAM,kBAAkB,cAAE,OAAO;AAAA,EACtC,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,cACP,OAAO,EACP,MAAM,uDAAuD;AAClE,CAAC;;;AHXD,IAAM,aAAa,eAAAC,QAAQ,OAAO;AAElC,WAAW,KAAK,UAAU,aAAa,eAAe,GAAG,KAAK;AAE9D,WAAW,KAAK,aAAa,aAAa,sBAAsB,GAAG,QAAQ;AAE3E,IAAO,sBAAQ;;;ADPf,kBAAiB;AACjB,oBAAmB;AACnB,cAAAC,QAAO,OAAO;AAEd,IAAM,UAAe,gBAAAC,SAAQ;AAC7B,IAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,IAAI,QAAI,YAAAC,SAAK,CAAC;AACd,IAAI,QAAI,cAAAC,SAAO,CAAC;AAChB,IAAI,IAAI,gBAAAF,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,SAAS,mBAAU;AAE3B,IAAI,OAAO,MAAM,MAAM;AACrB,UAAQ,IAAI,yCAAyC,IAAI,EAAE;AAC7D,CAAC;","names":["import_express","jwt","import_zod","express","dotenv","express","cors","helmet"]}