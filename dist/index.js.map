{"version":3,"sources":["../src/index.ts","../src/routes/auth.routes.ts","../src/controllers/authController.ts","../src/model/authModel.ts","../src/middleware/validationMiddleware.ts","../src/schemas/authSchema.ts","../src/routes/app.routes.ts","../src/middleware/authValidationMiddleware.ts"],"sourcesContent":["import express, { Express } from \"express\";\r\nimport dotenv from \"dotenv\";\r\nimport authRouter from \"./routes/auth.routes\";\r\nimport appRouter from \"./routes/app.routes\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport mongoose from \"mongoose\";\r\ndotenv.config();\r\n\r\nconst app: Express = express();\r\nconst PORT = process.env.PORT || 5000;\r\napp.use(cors());\r\napp.use(helmet());\r\napp.use(express.json());\r\napp.use(\"/auth\", authRouter);\r\napp.use(\"/\", appRouter);\r\nmongoose.connect(process.env.DB as string).then(() => {\r\n  console.log(\"Connected to the database\");\r\n  app.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n  });\r\n});\r\n","import express from \"express\";\r\nimport { login, register } from \"../controllers/authController\";\r\nimport { validateData } from \"../middleware/validationMiddleware\";\r\nimport { authRegistrationSchema, authLoginSchema } from \"../schemas/authSchema\";\r\nconst authRouter = express.Router();\r\n\r\nauthRouter.post(\"/login\", validateData(authLoginSchema), login);\r\n\r\nauthRouter.post(\"/register\", validateData(authRegistrationSchema), register);\r\n\r\nexport default authRouter;\r\n","import { Request, Response } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport authUser from \"../model/authModel\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst login = async (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const existingUser = await authUser.findOne({ email });\r\n    if (!existingUser) {\r\n      return res.status(404).json({ message: \"User does not exist\" });\r\n    }\r\n\r\n    const passwordCorrect = bcrypt.compareSync(password, existingUser.password);\r\n    if (!passwordCorrect) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const authToken = jwt.sign(\r\n      { email: existingUser.email, userId: existingUser._id },\r\n      process.env.SECRET as string,\r\n      { expiresIn: \"1d\" }\r\n    );\r\n    console.log(authToken);\r\n\r\n    res.json({ authToken });\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Error logging in\", error: err });\r\n  }\r\n};\r\n\r\nconst register = async (req: Request, res: Response) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    const existingUser = await authUser.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    const newUser = new authUser({\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    res.status(201).json({ message: \"User registered successfully\", email });\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Error registering user\", error: err });\r\n  }\r\n};\r\n\r\nexport { login, register };\r\n","import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface IUser extends Document {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst UserSchema: Schema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    trim: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n});\r\n\r\nconst authUser = mongoose.model<IUser>(\"auth\", UserSchema);\r\n\r\nexport default authUser;\r\n","import { Request, Response, NextFunction } from \"express\";\r\nimport { z, ZodError } from \"zod\";\r\n\r\nimport { StatusCodes } from \"http-status-codes\";\r\n\r\nexport function validateData(schema: z.ZodObject<any, any>) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      schema.parse(req.body);\r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof ZodError) {\r\n        const errorMessages = error.errors.map((issue: any) => ({\r\n          message: `${issue.path.join(\".\")} is ${issue.message}`,\r\n        }));\r\n        res\r\n          .status(StatusCodes.BAD_REQUEST)\r\n          .json({ error: \"Invalid data\", details: errorMessages });\r\n      } else {\r\n        res\r\n          .status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ error: \"Internal Server Error\" });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const authRegistrationSchema = z.object({\r\n  name: z.string().min(2).max(255),\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n\r\nexport const authLoginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n","import express from \"express\";\r\nimport { isAuth } from \"../middleware/authValidationMiddleware\";\r\nconst appRouter = express.Router();\r\n\r\nappRouter.get(\"/\", isAuth, (req, res) => {\r\n  res.send(\"Hello World\");\r\n});\r\n\r\nexport default appRouter;\r\n","// import { SECRET_KEY } from \"./authValidationMiddleware\";\r\nimport jwt, { Secret, JwtPayload } from \"jsonwebtoken\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport const SECRET_KEY: Secret = process.env.SECRET as Secret;\r\n\r\nconsole.log(\"env token\", SECRET_KEY, process.env.SECRET);\r\nexport interface CustomRequest extends Request {\r\n  token: string | JwtPayload;\r\n}\r\n\r\nexport const isAuth = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    console.log(\"req.headers\", req.header);\r\n\r\n    const token = req.header(\"Authorization\")?.slice(7);\r\n    console.log(\"header token\", token);\r\n    console.log(\"env token\", SECRET_KEY, process.env.SECRET);\r\n\r\n    if (!token) {\r\n      throw new Error();\r\n    }\r\n    const decoded = jwt.verify(token, SECRET_KEY);\r\n    (req as CustomRequest).token = decoded;\r\n\r\n    next();\r\n  } catch (err) {\r\n    res.status(401).send(\"Please authenticate\");\r\n  }\r\n};\r\n"],"mappings":"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","names":["import_express","mongoose","bcrypt","jwt","import_zod","express","import_express","import_jsonwebtoken","jwt","express","import_mongoose","dotenv","express","cors","helmet","mongoose"]}