{"version":3,"sources":["../src/index.ts","../src/routes/auth.routes.ts","../src/controllers/authController.ts","../src/model/authModel.ts","../src/middleware/validationMiddleware.ts","../src/schemas/authSchema.ts","../src/routes/app.routes.ts","../src/middleware/authValidationMiddleware.ts","../src/model/appModel.ts","../src/controllers/appController.ts","../src/schemas/appSchema.ts"],"sourcesContent":["import express, { Express } from \"express\";\r\nimport dotenv from \"dotenv\";\r\nimport authRouter from \"./routes/auth.routes\";\r\nimport appRouter from \"./routes/app.routes\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport mongoose from \"mongoose\";\r\ndotenv.config();\r\n\r\nconst app: Express = express();\r\nconst PORT = process.env.PORT || 5000;\r\napp.use(cors());\r\napp.use(helmet());\r\napp.use(express.json());\r\napp.use(\"/auth\", authRouter);\r\napp.use(\"/\", appRouter);\r\nmongoose.connect(process.env.DB as string).then(() => {\r\n  console.log(\"Connected to the database\");\r\n  app.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n  });\r\n});\r\n","import express from \"express\";\r\nimport { login, register } from \"../controllers/authController\";\r\nimport { validateData } from \"../middleware/validationMiddleware\";\r\nimport { authRegistrationSchema, authLoginSchema } from \"../schemas/authSchema\";\r\nconst authRouter = express.Router();\r\n\r\nauthRouter.post(\"/login\", validateData(authLoginSchema), login);\r\n\r\nauthRouter.post(\"/register\", validateData(authRegistrationSchema), register);\r\n\r\nexport default authRouter;\r\n","import { Request, Response } from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport authUser from \"../model/authModel\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\nconst login = async (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const existingUser = await authUser.findOne({ email });\r\n    if (!existingUser) {\r\n      return res.status(404).json({ message: \"User does not exist\" });\r\n    }\r\n\r\n    const passwordCorrect = bcrypt.compareSync(password, existingUser.password);\r\n    if (!passwordCorrect) {\r\n      return res.status(400).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const authToken = jwt.sign(\r\n      { email: existingUser.email, userId: existingUser._id },\r\n      process.env.SECRET as string,\r\n      { expiresIn: \"1d\" }\r\n    );\r\n    console.log(authToken);\r\n\r\n    res.json({ authToken });\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Error logging in\", error: err });\r\n  }\r\n};\r\n\r\nconst register = async (req: Request, res: Response) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    const existingUser = await authUser.findOne({ email });\r\n    if (existingUser) {\r\n      return res.status(400).json({ message: \"User already exists\" });\r\n    }\r\n\r\n    const salt = await bcrypt.genSalt(10);\r\n    const hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n    const newUser = new authUser({\r\n      name,\r\n      email,\r\n      password: hashedPassword,\r\n    });\r\n\r\n    await newUser.save();\r\n\r\n    res.status(201).json({ message: \"User registered successfully\", email });\r\n  } catch (err) {\r\n    res.status(500).json({ message: \"Error registering user\", error: err });\r\n  }\r\n};\r\n\r\nexport { login, register };\r\n","import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface IUser extends Document {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst UserSchema: Schema = new Schema({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    trim: true,\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true,\r\n  },\r\n});\r\n\r\nconst authUser = mongoose.model<IUser>(\"auth\", UserSchema);\r\n\r\nexport default authUser;\r\n","import { Request, Response, NextFunction } from \"express\";\r\nimport { z, ZodError } from \"zod\";\r\n\r\nimport { StatusCodes } from \"http-status-codes\";\r\n\r\nexport function validateData(schema: z.ZodObject<any, any>) {\r\n  return (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      schema.parse(req.body);\r\n      next();\r\n    } catch (error) {\r\n      if (error instanceof ZodError) {\r\n        const errorMessages = error.errors.map((issue: any) => ({\r\n          message: `${issue.path.join(\".\")} is ${issue.message}`,\r\n        }));\r\n        res\r\n          .status(StatusCodes.BAD_REQUEST)\r\n          .json({ error: \"Invalid data\", details: errorMessages });\r\n      } else {\r\n        res\r\n          .status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n          .json({ error: \"Internal Server Error\" });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import { z } from \"zod\";\r\n\r\nexport const authRegistrationSchema = z.object({\r\n  name: z.string().min(2).max(255),\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n\r\nexport const authLoginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z\r\n    .string()\r\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\w\\s])\\S{8,16}$/),\r\n});\r\n","import express from \"express\";\r\nimport { isAuth } from \"../middleware/authValidationMiddleware\";\r\nimport multer from \"multer\";\r\nimport {\r\n  addTodo,\r\n  deleteTodo,\r\n  formUpload,\r\n  getTodos,\r\n  updateTodo,\r\n} from \"../controllers/appController\";\r\nimport { appSchema } from \"../schemas/appSchema\";\r\nimport { validateData } from \"../middleware/validationMiddleware\";\r\n\r\nconst appRouter = express.Router();\r\nconst upload = multer({ dest: \"uploads/\" });\r\nappRouter.post(\"/add\", upload.single(\"image\"), isAuth, addTodo);\r\nappRouter.get(\"/todos\", isAuth, getTodos);\r\nappRouter.delete(\"/delete/:id\", isAuth, deleteTodo);\r\nappRouter.put(\"/update\", isAuth, updateTodo);\r\nappRouter.post(\r\n  \"/formdata\",\r\n  upload.single(\"image\"),\r\n  validateData(appSchema),\r\n  formUpload\r\n);\r\nexport default appRouter;\r\n","import jwt, { Secret, JwtPayload } from \"jsonwebtoken\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nconst SECRET_KEY: Secret = process.env.SECRET as Secret;\r\n\r\nconsole.log(\"env token\", SECRET_KEY, process.env.SECRET);\r\nexport interface CustomRequest extends Request {\r\n  token: string | JwtPayload;\r\n}\r\n\r\nexport const isAuth = async (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n) => {\r\n  try {\r\n    console.log(\"req.headers\", req.header);\r\n\r\n    const token = req.header(\"Authorization\")?.slice(7);\r\n    console.log(\"header token\", token);\r\n    console.log(\"env token\", SECRET_KEY, process.env.SECRET);\r\n\r\n    if (!token) {\r\n      throw new Error();\r\n    }\r\n    const decoded = jwt.verify(token, process.env.SECRET as Secret);\r\n    (req as CustomRequest).token = decoded;\r\n\r\n    next();\r\n  } catch (err) {\r\n    res.status(401).send(\"Please authenticate\");\r\n  }\r\n};\r\n","import mongoose, { Schema, Document } from \"mongoose\";\r\n\r\ninterface IApp extends Document {\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\nconst AppSchema: Schema = new Schema({\r\n  title: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n  },\r\n  description: {\r\n    type: String,\r\n    required: true,\r\n    trim: true,\r\n  },\r\n});\r\n\r\nconst formUploadSchema: Schema = new Schema({\r\n  personal: {\r\n    name: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    age: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n  },\r\n  address: {\r\n    street: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    city: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n  },\r\n});\r\n\r\nexport const formUploadModel = mongoose.model(\"formUpload\", formUploadSchema);\r\nexport const appModel = mongoose.model<IApp>(\"app\", AppSchema);\r\n","import { Request, Response } from \"express\";\r\nimport { appModel, formUploadModel } from \"../model/appModel\";\r\nconst addTodo = async (req: Request, res: Response) => {\r\n  const dataModel = new appModel({\r\n    title: req.body.title,\r\n    description: req.body.description,\r\n  });\r\n  await dataModel.save();\r\n  res.json({ message: \"Todo added successfully\" });\r\n};\r\n\r\nconst getTodos = async (req: Request, res: Response) => {\r\n  const todos = await appModel.find({});\r\n  res.json(todos);\r\n};\r\n\r\nconst deleteTodo = async (req: Request, res: Response) => {\r\n  await appModel.findByIdAndDelete(req.params.id);\r\n  res.json({ message: \"Todo deleted successfully\" });\r\n};\r\n\r\nconst updateTodo = async (req: Request, res: Response) => {\r\n  if (!req.body.title || !req.body.description) {\r\n    return res.status(400).json({ message: \"Please provide all details\" });\r\n  }\r\n\r\n  if (!req.query.id) {\r\n    return res.status(400).json({ message: \"Please provide id\" });\r\n  }\r\n\r\n  await appModel.findByIdAndUpdate(req.query.id, {\r\n    title: req.body.title,\r\n    description: req.body.description,\r\n  });\r\n  res.json({ message: \"Todo updated successfully\" });\r\n};\r\n\r\nconst formUpload = async (req: Request, res: Response) => {\r\n  const { personal, address } = req.body;\r\n\r\n  const { name, age } = personal;\r\n  const { street, city } = address;\r\n\r\n  console.log(`Name: ${name}, Age: ${age}`);\r\n  console.log(`Street: ${street}, City: ${city}`);\r\n  const dataModel = new formUploadModel({\r\n    personal: req.body.personal,\r\n    address: req.body.address,\r\n  });\r\n  const isSaved = await dataModel.save();\r\n  if (!isSaved) {\r\n    return res.status(400).json({ message: \"Data not saved\" });\r\n  } else {\r\n    return res.json({ message: \"Data saved successfully\", personal, address });\r\n  }\r\n};\r\n\r\nexport { addTodo, getTodos, deleteTodo, updateTodo, formUpload };\r\n","import z from \"zod\";\r\n\r\nexport const appSchema = z.object({\r\n  personal: z.object({\r\n    name: z.string(),\r\n    age: z.number(),\r\n  }),\r\n  address: z.object({\r\n    street: z.string(),\r\n    city: z.string(),\r\n  }),\r\n});\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,kBAAiC;AACjC,oBAAmB;;;ACDnB,qBAAoB;;;ACCpB,0BAAgB;;;ACDhB,sBAA2C;AAQ3C,IAAM,aAAqB,IAAI,uBAAO;AAAA,EACpC,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,MAAM;AAAA,EACR;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,EACZ;AACF,CAAC;AAED,IAAM,WAAW,gBAAAC,QAAS,MAAa,QAAQ,UAAU;AAEzD,IAAO,oBAAQ;;;ADzBf,oBAAmB;AAEnB,IAAM,QAAQ,CAAO,KAAc,QAAkB;AACnD,QAAM,EAAE,OAAO,SAAS,IAAI,IAAI;AAChC,MAAI;AACF,UAAM,eAAe,MAAM,kBAAS,QAAQ,EAAE,MAAM,CAAC;AACrD,QAAI,CAAC,cAAc;AACjB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,sBAAsB,CAAC;AAAA,IAChE;AAEA,UAAM,kBAAkB,cAAAC,QAAO,YAAY,UAAU,aAAa,QAAQ;AAC1E,QAAI,CAAC,iBAAiB;AACpB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,sBAAsB,CAAC;AAAA,IAChE;AAEA,UAAM,YAAY,oBAAAC,QAAI;AAAA,MACpB,EAAE,OAAO,aAAa,OAAO,QAAQ,aAAa,IAAI;AAAA,MACtD,QAAQ,IAAI;AAAA,MACZ,EAAE,WAAW,KAAK;AAAA,IACpB;AACA,YAAQ,IAAI,SAAS;AAErB,QAAI,KAAK,EAAE,UAAU,CAAC;AAAA,EACxB,SAAS,KAAK;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,oBAAoB,OAAO,IAAI,CAAC;AAAA,EAClE;AACF;AAEA,IAAM,WAAW,CAAO,KAAc,QAAkB;AACtD,QAAM,EAAE,MAAM,OAAO,SAAS,IAAI,IAAI;AAEtC,MAAI;AACF,UAAM,eAAe,MAAM,kBAAS,QAAQ,EAAE,MAAM,CAAC;AACrD,QAAI,cAAc;AAChB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,sBAAsB,CAAC;AAAA,IAChE;AAEA,UAAM,OAAO,MAAM,cAAAD,QAAO,QAAQ,EAAE;AACpC,UAAM,iBAAiB,MAAM,cAAAA,QAAO,KAAK,UAAU,IAAI;AAEvD,UAAM,UAAU,IAAI,kBAAS;AAAA,MAC3B;AAAA,MACA;AAAA,MACA,UAAU;AAAA,IACZ,CAAC;AAED,UAAM,QAAQ,KAAK;AAEnB,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,gCAAgC,MAAM,CAAC;AAAA,EACzE,SAAS,KAAK;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,0BAA0B,OAAO,IAAI,CAAC;AAAA,EACxE;AACF;;;AEtDA,iBAA4B;AAE5B,+BAA4B;AAErB,SAAS,aAAa,QAA+B;AAC1D,SAAO,CAAC,KAAc,KAAe,SAAuB;AAC1D,QAAI;AACF,aAAO,MAAM,IAAI,IAAI;AACrB,WAAK;AAAA,IACP,SAAS,OAAO;AACd,UAAI,iBAAiB,qBAAU;AAC7B,cAAM,gBAAgB,MAAM,OAAO,IAAI,CAAC,WAAgB;AAAA,UACtD,SAAS,GAAG,MAAM,KAAK,KAAK,GAAG,CAAC,OAAO,MAAM,OAAO;AAAA,QACtD,EAAE;AACF,YACG,OAAO,qCAAY,WAAW,EAC9B,KAAK,EAAE,OAAO,gBAAgB,SAAS,cAAc,CAAC;AAAA,MAC3D,OAAO;AACL,YACG,OAAO,qCAAY,qBAAqB,EACxC,KAAK,EAAE,OAAO,wBAAwB,CAAC;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AACF;;;ACzBA,IAAAE,cAAkB;AAEX,IAAM,yBAAyB,cAAE,OAAO;AAAA,EAC7C,MAAM,cAAE,OAAO,EAAE,IAAI,CAAC,EAAE,IAAI,GAAG;AAAA,EAC/B,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,cACP,OAAO,EACP,MAAM,uDAAuD;AAClE,CAAC;AAEM,IAAM,kBAAkB,cAAE,OAAO;AAAA,EACtC,OAAO,cAAE,OAAO,EAAE,MAAM;AAAA,EACxB,UAAU,cACP,OAAO,EACP,MAAM,uDAAuD;AAClE,CAAC;;;AJXD,IAAM,aAAa,eAAAC,QAAQ,OAAO;AAElC,WAAW,KAAK,UAAU,aAAa,eAAe,GAAG,KAAK;AAE9D,WAAW,KAAK,aAAa,aAAa,sBAAsB,GAAG,QAAQ;AAE3E,IAAO,sBAAQ;;;AKVf,IAAAC,kBAAoB;;;ACApB,IAAAC,uBAAwC;AAGxC,IAAM,aAAqB,QAAQ,IAAI;AAEvC,QAAQ,IAAI,aAAa,YAAY,QAAQ,IAAI,MAAM;AAKhD,IAAM,SAAS,CACpB,KACA,KACA,SACG;AAdL;AAeE,MAAI;AACF,YAAQ,IAAI,eAAe,IAAI,MAAM;AAErC,UAAM,SAAQ,SAAI,OAAO,eAAe,MAA1B,mBAA6B,MAAM;AACjD,YAAQ,IAAI,gBAAgB,KAAK;AACjC,YAAQ,IAAI,aAAa,YAAY,QAAQ,IAAI,MAAM;AAEvD,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM;AAAA,IAClB;AACA,UAAM,UAAU,qBAAAC,QAAI,OAAO,OAAO,QAAQ,IAAI,MAAgB;AAC9D,IAAC,IAAsB,QAAQ;AAE/B,SAAK;AAAA,EACP,SAAS,KAAK;AACZ,QAAI,OAAO,GAAG,EAAE,KAAK,qBAAqB;AAAA,EAC5C;AACF;;;AD9BA,oBAAmB;;;AEFnB,IAAAC,mBAA2C;AAO3C,IAAM,YAAoB,IAAI,wBAAO;AAAA,EACnC,OAAO;AAAA,IACL,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,UAAU;AAAA,IACV,MAAM;AAAA,EACR;AACF,CAAC;AAED,IAAM,mBAA2B,IAAI,wBAAO;AAAA,EAC1C,UAAU;AAAA,IACR,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,EACF;AACF,CAAC;AAEM,IAAM,kBAAkB,iBAAAC,QAAS,MAAM,cAAc,gBAAgB;AACrE,IAAM,WAAW,iBAAAA,QAAS,MAAY,OAAO,SAAS;;;AC1C7D,IAAM,UAAU,CAAO,KAAc,QAAkB;AACrD,QAAM,YAAY,IAAI,SAAS;AAAA,IAC7B,OAAO,IAAI,KAAK;AAAA,IAChB,aAAa,IAAI,KAAK;AAAA,EACxB,CAAC;AACD,QAAM,UAAU,KAAK;AACrB,MAAI,KAAK,EAAE,SAAS,0BAA0B,CAAC;AACjD;AAEA,IAAM,WAAW,CAAO,KAAc,QAAkB;AACtD,QAAM,QAAQ,MAAM,SAAS,KAAK,CAAC,CAAC;AACpC,MAAI,KAAK,KAAK;AAChB;AAEA,IAAM,aAAa,CAAO,KAAc,QAAkB;AACxD,QAAM,SAAS,kBAAkB,IAAI,OAAO,EAAE;AAC9C,MAAI,KAAK,EAAE,SAAS,4BAA4B,CAAC;AACnD;AAEA,IAAM,aAAa,CAAO,KAAc,QAAkB;AACxD,MAAI,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,KAAK,aAAa;AAC5C,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,6BAA6B,CAAC;AAAA,EACvE;AAEA,MAAI,CAAC,IAAI,MAAM,IAAI;AACjB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,oBAAoB,CAAC;AAAA,EAC9D;AAEA,QAAM,SAAS,kBAAkB,IAAI,MAAM,IAAI;AAAA,IAC7C,OAAO,IAAI,KAAK;AAAA,IAChB,aAAa,IAAI,KAAK;AAAA,EACxB,CAAC;AACD,MAAI,KAAK,EAAE,SAAS,4BAA4B,CAAC;AACnD;AAEA,IAAM,aAAa,CAAO,KAAc,QAAkB;AACxD,QAAM,EAAE,UAAU,QAAQ,IAAI,IAAI;AAElC,QAAM,EAAE,MAAM,IAAI,IAAI;AACtB,QAAM,EAAE,QAAQ,KAAK,IAAI;AAEzB,UAAQ,IAAI,SAAS,IAAI,UAAU,GAAG,EAAE;AACxC,UAAQ,IAAI,WAAW,MAAM,WAAW,IAAI,EAAE;AAC9C,QAAM,YAAY,IAAI,gBAAgB;AAAA,IACpC,UAAU,IAAI,KAAK;AAAA,IACnB,SAAS,IAAI,KAAK;AAAA,EACpB,CAAC;AACD,QAAM,UAAU,MAAM,UAAU,KAAK;AACrC,MAAI,CAAC,SAAS;AACZ,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,SAAS,iBAAiB,CAAC;AAAA,EAC3D,OAAO;AACL,WAAO,IAAI,KAAK,EAAE,SAAS,2BAA2B,UAAU,QAAQ,CAAC;AAAA,EAC3E;AACF;;;ACvDA,IAAAC,cAAc;AAEP,IAAM,YAAY,YAAAC,QAAE,OAAO;AAAA,EAChC,UAAU,YAAAA,QAAE,OAAO;AAAA,IACjB,MAAM,YAAAA,QAAE,OAAO;AAAA,IACf,KAAK,YAAAA,QAAE,OAAO;AAAA,EAChB,CAAC;AAAA,EACD,SAAS,YAAAA,QAAE,OAAO;AAAA,IAChB,QAAQ,YAAAA,QAAE,OAAO;AAAA,IACjB,MAAM,YAAAA,QAAE,OAAO;AAAA,EACjB,CAAC;AACH,CAAC;;;AJED,IAAM,YAAY,gBAAAC,QAAQ,OAAO;AACjC,IAAM,aAAS,cAAAC,SAAO,EAAE,MAAM,WAAW,CAAC;AAC1C,UAAU,KAAK,QAAQ,OAAO,OAAO,OAAO,GAAG,QAAQ,OAAO;AAC9D,UAAU,IAAI,UAAU,QAAQ,QAAQ;AACxC,UAAU,OAAO,eAAe,QAAQ,UAAU;AAClD,UAAU,IAAI,WAAW,QAAQ,UAAU;AAC3C,UAAU;AAAA,EACR;AAAA,EACA,OAAO,OAAO,OAAO;AAAA,EACrB,aAAa,SAAS;AAAA,EACtB;AACF;AACA,IAAO,qBAAQ;;;ANrBf,kBAAiB;AACjB,oBAAmB;AACnB,IAAAC,mBAAqB;AACrB,cAAAC,QAAO,OAAO;AAEd,IAAM,UAAe,gBAAAC,SAAQ;AAC7B,IAAM,OAAO,QAAQ,IAAI,QAAQ;AACjC,IAAI,QAAI,YAAAC,SAAK,CAAC;AACd,IAAI,QAAI,cAAAC,SAAO,CAAC;AAChB,IAAI,IAAI,gBAAAF,QAAQ,KAAK,CAAC;AACtB,IAAI,IAAI,SAAS,mBAAU;AAC3B,IAAI,IAAI,KAAK,kBAAS;AACtB,iBAAAG,QAAS,QAAQ,QAAQ,IAAI,EAAY,EAAE,KAAK,MAAM;AACpD,UAAQ,IAAI,2BAA2B;AACvC,MAAI,OAAO,MAAM,MAAM;AACrB,YAAQ,IAAI,yCAAyC,IAAI,EAAE;AAAA,EAC7D,CAAC;AACH,CAAC;","names":["import_express","mongoose","bcrypt","jwt","import_zod","express","import_express","import_jsonwebtoken","jwt","import_mongoose","mongoose","import_zod","z","express","multer","import_mongoose","dotenv","express","cors","helmet","mongoose"]}